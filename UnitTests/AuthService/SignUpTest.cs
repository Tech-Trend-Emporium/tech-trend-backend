using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Auth;
using Application.Exceptions;
using Application.Services;
using Data.Entities;
using Microsoft.AspNetCore.Identity;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.AuthServices
{
    // Code generated by AI
    public class SignUpTest
    {
        private readonly IUserRepository _userRepo = Substitute.For<IUserRepository>();
        private readonly ISessionRepository _sessionRepo = Substitute.For<ISessionRepository>();
        private readonly IRefreshTokenRepository _rtRepo = Substitute.For<IRefreshTokenRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly IPasswordHasher<User> _hasher = Substitute.For<IPasswordHasher<User>>();
        private readonly ITokenService _tokens = Substitute.For<ITokenService>();
        private readonly AuthService _sut;

        public SignUpTest()
        {
            _sut = new AuthService(_userRepo, _sessionRepo, _rtRepo, _uow, _hasher, _tokens);
        }

        [Fact]
        public async Task SignUp_ShouldCreateUser_WhenEmailAndUsernameAreFree()
        {
            var ct = CancellationToken.None;
            var dto = new SignUpRequest { Email = "new@user.com", Username = "newuser", Password = "Strong!" };

            _userRepo.ExistsAsync(Arg.Any<Expression<Func<User, bool>>>(), ct).Returns(false);
            _hasher.HashPassword(Arg.Any<User>(), dto.Password).Returns("hashed");

            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.SignUp(dto, ct);

            Assert.NotNull(res);
            _userRepo.Received(1).Add(Arg.Is<User>(u =>
                u.Email == dto.Email && u.Username == dto.Username && u.PasswordHash == "hashed"));
            await _uow.Received(1).SaveChangesAsync(ct);
        }

        [Fact]
        public async Task SignUp_ShouldThrowConflict_WhenEmailOrUsernameTaken()
        {
            var ct = CancellationToken.None;
            var dto = new SignUpRequest { Email = "dup@user.com", Username = "dup", Password = "x" };

            _userRepo.ExistsAsync(Arg.Any<Expression<Func<User, bool>>>(), ct).Returns(true);

            await Assert.ThrowsAsync<ConflictException>(() => _sut.SignUp(dto, ct));
        }
    }
}
