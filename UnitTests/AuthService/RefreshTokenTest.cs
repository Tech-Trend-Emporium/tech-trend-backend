using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Auth;
using Application.Exceptions;
using Application.Services;
using Data.Entities;
using Domain.Entities;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.AuthServices
{
    // Code generated by AI
    public class RefreshTokenTest
    {
        private readonly IUserRepository _userRepo = Substitute.For<IUserRepository>();
        private readonly ISessionRepository _sessionRepo = Substitute.For<ISessionRepository>();
        private readonly IRefreshTokenRepository _rtRepo = Substitute.For<IRefreshTokenRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly Microsoft.AspNetCore.Identity.IPasswordHasher<User> _hasher = Substitute.For<Microsoft.AspNetCore.Identity.IPasswordHasher<User>>();
        private readonly ITokenService _tokens = Substitute.For<ITokenService>();
        private readonly AuthService _sut;

        public RefreshTokenTest()
        {
            _sut = new AuthService(_userRepo, _sessionRepo, _rtRepo, _uow, _hasher, _tokens);
        }

        [Fact]
        public async Task RefreshToken_ShouldRotateAndReturnNewTokens_WhenRefreshTokenValidAndUserActive()
        {
            var ct = CancellationToken.None;
            var req = new RefreshTokenRequest { RefreshToken = "rt-old" };
            var existingRt = TestHelper.NewRt(userId: 7, sessionId: 33, token: "rt-old", isActive: true);
            var user = TestHelper.NewUser(7, "u@x.com", "ux", active: true);

            _rtRepo.GetByTokenAsync(req.RefreshToken, ct).Returns(existingRt);
            _userRepo.GetByIdAsync(ct, existingRt.UserId).Returns(user);

            var newRt = TestHelper.NewRt(user.Id, existingRt.SessionId, token: "rt-new", isActive: true);
            _tokens.CreateRefreshToken(existingRt.UserId, existingRt.SessionId).Returns(newRt);

            var exp = DateTime.UtcNow.AddMinutes(30);
            _tokens.CreateAccessToken(user).Returns(("new-access", exp));

            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.RefreshToken(req, ct);

            Assert.NotNull(res);
            Assert.True(existingRt.RevokedAtUtc.HasValue);
            Assert.Equal("rt-new", newRt.Token);
            _rtRepo.Received(1).Add(newRt);
            await _uow.Received(1).SaveChangesAsync(ct);
        }

        [Fact]
        public async Task RefreshToken_ShouldThrowBadRequest_WhenTokenMissing()
        {
            var ct = CancellationToken.None;
            await Assert.ThrowsAsync<BadRequestException>(() => _sut.RefreshToken(new RefreshTokenRequest { RefreshToken = "   " }, ct));
        }

        [Fact]
        public async Task RefreshToken_ShouldThrowUnauthorized_WhenTokenNotFoundOrInactive()
        {
            var ct = CancellationToken.None;

            _rtRepo.GetByTokenAsync("x", ct).Returns((RefreshToken?)null);
            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.RefreshToken(new RefreshTokenRequest { RefreshToken = "x" }, ct));

            var inactive = TestHelper.NewRt(1, 2, token: "y", isActive: false);
            _rtRepo.GetByTokenAsync("y", ct).Returns(inactive);
            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.RefreshToken(new RefreshTokenRequest { RefreshToken = "y" }, ct));
        }

        [Fact]
        public async Task RefreshToken_ShouldThrowUnauthorized_WhenUserNotFoundOrInactive()
        {
            var ct = CancellationToken.None;
            var activeRt = TestHelper.NewRt(9, 3, token: "z", isActive: true);
            _rtRepo.GetByTokenAsync("z", ct).Returns(activeRt);

            _userRepo.GetByIdAsync(ct, activeRt.UserId).Returns((User?)null);
            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.RefreshToken(new RefreshTokenRequest { RefreshToken = "z" }, ct));

            var inactiveUser = TestHelper.NewUser(9, "a@b.com", "ab", active: false);
            _userRepo.GetByIdAsync(ct, activeRt.UserId).Returns(inactiveUser);
            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.RefreshToken(new RefreshTokenRequest { RefreshToken = "z" }, ct));
        }
    }
}
