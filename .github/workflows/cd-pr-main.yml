name: cd-pr-main (Gatekeeper)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: cd-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '8.0.0'
  IMAGE_NAME: trend-tech-emporium-api
  IMAGE_TAG: ${{ github.event.pull_request.head.sha }}
  REGISTRY_SERVER: ${{ vars.REGISTRY_SERVER }}
  REGISTRY_NAMESPACE: ${{ vars.REGISTRY_NAMESPACE }}
  IMAGE_URI: ${{ vars.REGISTRY_SERVER }}/${{ vars.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

jobs:
  gate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore/Build/Test
        run: |
          dotnet build --configuration Release
          dotnet test --configuration Release --no-build --logger "trx;LogFileName=test_results.trx"
        continue-on-error: true # Remember to remove when the project is not a skeleton!!!

      - name: Docker login (image existence check)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Check image exists in registry (tag=head SHA)
        id: check-image
        run: |
          set -e
          if docker manifest inspect "$IMAGE_URI" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        # Discard normal output: /dev/null
        # 2>&1 -> Send Stderr to Stdout (/dev/null). 0 is stdin, 1 is stdout, 2 is stderr
        # Error and output messages are suppressed.
      - name: Report
        run: |
          echo "Image checked: $IMAGE_URI" >> $GITHUB_STEP_SUMMARY
          echo "Exists: ${{ steps.check-image.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
