using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Application.Abstraction;
using Application.Abstractions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Inventory;
using NSubstitute;
using Xunit;

namespace UnitTests.InventoryServices
{
    // Code generated by AI
    public class ListAsyncTest
    {
        private readonly IInventoryRepository _inventoryRepository = Substitute.For<IInventoryRepository>();
        private readonly IProductRepository _productRepository = Substitute.For<IProductRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly InventoryService _sut;

        public ListAsyncTest()
        {
            _sut = new InventoryService(_inventoryRepository, _productRepository, _unitOfWork);
        }

        [Fact]
        public async Task ListAsync_ShouldReturnMappedInventoryResponses_WhenDataExists()
        {
            // Arrange
            var ct = CancellationToken.None;
            int skip = 0;
            int take = 10;

            var inventories = new List<Inventory>
            {
                new() { Id = 1, ProductId = 100, Total = 1000, Available = 800 },
                new() { Id = 2, ProductId = 200, Total = 150,Available = 100 }
            };

            var products = new List<Product>
            {
                new Product { Id = 100, Title = "Keyboard" },
                new Product { Id = 200, Title = "Mouse" }
            };            

            var expectedResponses = new List<InventoryResponse>
            {
                new() { Id = 1, ProductName = "Keyboard", Total = 1000, Available = 800 },
                new() { Id = 2, ProductName = "Mouse", Total = 150, Available = 100 }
            };

            _inventoryRepository.ListAsync(skip, take, ct).Returns(inventories);

            _productRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(products);

            // Act
            var result = await _sut.ListAsync(skip, take, ct);

            // Assert
            Assert.Equal(expectedResponses.Count, result.Count);
            
            Assert.Equal(expectedResponses[0].Id, result[0].Id);
            Assert.Equal(expectedResponses[0].ProductName, result[0].ProductName);
            Assert.Equal(expectedResponses[0].Total, result[0].Total);
            Assert.Equal(expectedResponses[0].Available, result[0].Available);

            
        }
        
        [Fact]
        public async Task ListAsync_ShouldReturnEmpty_WhenNoInventoriesExist()
        {
            // Arrange
            var ct = CancellationToken.None;
            int skip = 0;
            int take = 10;

            var products = new List<Product>
            {
                new Product { Id = 100, Title = "Keyboard" },
                new Product { Id = 200, Title = "Mouse" }
            };
            _inventoryRepository.ListAsync(skip, take, ct).Returns(new List<Inventory>());
            _productRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(products);

            // Act
            var result = await _sut.ListAsync();

            // Assert
            Assert.NotNull(result);
            Assert.Empty(result);

        }
    }
}
