using Application.Abstraction;
using Application.Abstractions;
using Data.Entities;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.ReviewService
{
    // Code generated by AI
    public class GetByIdAsyncTests
    {
        private readonly IReviewRepository _reviewRepository;
        private readonly IUserRepository _userRepository;
        private readonly IProductRepository _productRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly Application.Services.Implementations.ReviewService _sut; // System Under Test

        public GetByIdAsyncTests()
        {
            _reviewRepository = Substitute.For<IReviewRepository>();
            _userRepository = Substitute.For<IUserRepository>();
            _productRepository = Substitute.For<IProductRepository>();
            _unitOfWork = Substitute.For<IUnitOfWork>();

            _sut = new Application.Services.Implementations.ReviewService(
                _reviewRepository,
                _userRepository,
                _productRepository,
                _unitOfWork
            );
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnReviewResponse_WhenReviewExists()
        {
            // Arrange
            var ct = CancellationToken.None;
            var reviewId = 1;

            var reviewEntity = new Review
            {
                Id = reviewId,
                UserId = 10,
                ProductId = 100,
                Rating = 5,
                Comment = "Excellent!"
            };

            var userEntity = new User
            {
                Id = 10,
                Username = "TestUser"
            };

            _reviewRepository.GetByIdAsync(ct, reviewId).Returns(reviewEntity);
            _userRepository.GetByIdAsync(ct, reviewEntity.UserId).Returns(userEntity);

            // Act
            var result = await _sut.GetByIdAsync(reviewId, ct);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(reviewId, result!.Id);
            Assert.Equal(userEntity.Username, result.Username);
            Assert.Equal(reviewEntity.Comment, result.Comment);
            await _reviewRepository.Received(1).GetByIdAsync(ct, reviewId);
            await _userRepository.Received(1).GetByIdAsync(ct, reviewEntity.UserId);
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnNull_WhenReviewDoesNotExist()
        {
            // Arrange
            var ct = CancellationToken.None;
            var reviewId = 99;

            _reviewRepository.GetByIdAsync(ct, reviewId).Returns((Review?)null);

            // Act
            var result = await _sut.GetByIdAsync(reviewId, ct);

            // Assert
            Assert.Null(result);
            await _reviewRepository.Received(1).GetByIdAsync(ct, reviewId);
            await _userRepository.DidNotReceive().GetByIdAsync(Arg.Any<CancellationToken>(), Arg.Any<int>());
        }

    }
}
