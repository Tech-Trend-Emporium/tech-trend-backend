using Application.Abstraction;
using Application.Abstractions;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class ClearAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public ClearAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
        }

        [Fact]
        public async Task ClearAsync_RemovesAllItems_WhenOk()
        {
            var ct = CancellationToken.None;
            int userId = 1;

            var initial = TestHelper.CartWithItem(userId, 10, 1, 7);
            initial.Items.Add(new Data.Entities.CartItem { CartId = 7, ProductId = 20, Quantity = 2 });

            var reloaded = TestHelper.EmptyCart(userId, 7);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, reloaded);
            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.ClearAsync(userId, ct);

            Assert.Empty(res.Items);
            await _uow.Received(1).SaveChangesAsync(ct);
        }

        [Fact]
        public async Task ClearAsync_CreatesCart_WhenNoneExists()
        {
            var ct = CancellationToken.None;
            int userId = 2;
            var created = TestHelper.EmptyCart(userId, 9);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns((Data.Entities.Cart?)null, created);
            _cartRepo.CreateForUserAsync(userId, ct).Returns(created);
            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.ClearAsync(userId, ct);

            Assert.Equal(userId, res.UserId);
            Assert.Empty(res.Items);
        }
    }
}
