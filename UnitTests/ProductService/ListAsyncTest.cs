using Application.Abstraction;
using Application.Abstractions;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Product;
using General.Mappers;
using NSubstitute;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace UnitTests.ProductServices
{
    // Code generated by AI
    public class ListAsyncTest
    {
        private readonly IProductRepository _productRepository = Substitute.For<IProductRepository>();
        private readonly ICategoryRepository _categoryRepository = Substitute.For<ICategoryRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly ProductService _sut;

        public ListAsyncTest()
        {
            _sut = new ProductService(_productRepository, _categoryRepository, _unitOfWork);
        }

        [Fact]
        public async Task ListAsync_ShouldReturnMappedProducts_WhenProductsExist()
        {
            // Arrange
            var ct = CancellationToken.None;
            var skip = 0;
            var take = 50;

            var products = new List<Product>
            {
                new Product { Id = 1, Title = "Laptop", CategoryId = 10 },
                new Product { Id = 2, Title = "Mouse", CategoryId = 20 },
                new Product { Id = 3, Title = "Keyboard", CategoryId = 10 }
            };

            var categories = new List<Category>
            {
                new Category { Id = 10, Name = "Electronics" },
                new Category { Id = 20, Name = "Accessories" }
            };

            var categoriesDict = new Dictionary<int,string>
            {
                { 10, "Electronics" },
                { 20, "Accessories" }
            };

            var categoryNames = new List<string>
            {
                "Electronics",
                "Accessories",
                "Electronics"
            };

            /*
            var expectedResponse = new List<ProductResponse>
            {
                new ProductResponse { Id = 1, Name = "Laptop", CategoryName = "Electronics" },
                new ProductResponse { Id = 2, Name = "Mouse", CategoryName = "Accessories" },
                new ProductResponse { Id = 3, Name = "Keyboard", CategoryName = "Electronics" }
            };
            */

            _productRepository.ListAsync(skip, take, ct).Returns(products);
            _categoryRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(categories);

            IReadOnlyList<ProductResponse> simulatedMapperResult = ProductMapper.ToResponseList(products, categoriesDict);

            // Act
            var result = await _sut.ListAsync(skip, take, ct);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(simulatedMapperResult.Count, result.Count);
            Assert.Equal(simulatedMapperResult[0].Category, result[0].Category);
            Assert.Equal(simulatedMapperResult[0].Id, result[0].Id);
        }

        [Fact]
        public async Task ListAsync_ShouldReturnEmptyList_WhenNoProductsExist()
        {
            // Arrange
            var ct = CancellationToken.None;
            _productRepository.ListAsync(0, 50, ct).Returns(new List<Product>());

            // Act
            var result = await _sut.ListAsync(0, 50, ct);

            // Assert
            Assert.NotNull(result);
            Assert.Empty(result);
        }
    
        [Fact]
        public async Task ListAsync_ShouldManageUnknowCat_WithMissingCategories()
        {
            // Arrange
            var ct = CancellationToken.None;
            var products = new List<Product>
            {
                new Product { Id = 1, Title = "Laptop", CategoryId = 10, ImageUrl = " ", Description = " ", Count = 12},
                new Product { Id = 2, Title = "Mouse", CategoryId = 99, ImageUrl = " ", Description = " ", Count = 10 } // Non-existent category
            };
            var categories = new List<Category>
            {
                new Category { Id = 10, Name = "Electronics" }
                // CategoryId 99 does not exist
            };

            var categoriesDict = new Dictionary<int, string>
            {
                { 10, "Electronics" }
            };
            var categoryNames = new List<string>
            {
                "Electronics",
                "Unknown" // Expected fallback for missing category
            };
            _productRepository.ListAsync(0, 50, ct).Returns(products);
            _categoryRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(categories);
            IReadOnlyList<ProductResponse> simulatedMapperResult =
                ProductMapper.ToResponseList(products, categoriesDict);
            // Act
            var result = await _sut.ListAsync(0, 50, ct);
            // Assert
            Assert.NotNull(result);
            Assert.Equal(simulatedMapperResult.Count, result.Count);
            Assert.Equal("Unknown", result[1].Category); // Check fallback for missing category
        }

        [Fact]
        public async Task ListAsync_ShouldThrowException_WhenEmptyProductList()
        {
            // Arrange
            var ct = CancellationToken.None;
            var skip = 0;
            var take = 50;

            List<Product>? products = null;

            var categories = new List<Category>
            {
                new Category { Id = 10, Name = "Electronics" },
                new Category { Id = 20, Name = "Accessories" }
            };

            var categoryNames = new List<string>
            {
                "Electronics",
                "Accessories",
                "Electronics"
            };

            _productRepository.ListAsync(skip, take, ct).Returns(products);
            _categoryRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(categories);

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => _sut.ListAsync(skip, take, ct));
        }

        [Fact]

        public async Task ListAsync_ShouldThrowException_WhenCategoryListIsNull()
        {
            // Arrange
            var ct = CancellationToken.None;
            var skip = 0;
            var take = 50;
            var products = new List<Product>
            {
                new Product { Id = 1, Title = "Laptop", CategoryId = 10 },
                new Product { Id = 2, Title = "Mouse", CategoryId = 20 },
                new Product { Id = 3, Title = "Keyboard", CategoryId = 10 }
            };
            List<Category>? categories = null;
            var categoryNames = new List<string>
            {
                "Electronics",
                "Accessories",
                "Electronics"
            };
            _productRepository.ListAsync(skip, take, ct).Returns(products);
            _categoryRepository.ListByIdsAsync(ct, Arg.Any<List<int>>()).Returns(categories);
            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => _sut.ListAsync(skip, take, ct));
        }
    }
}
