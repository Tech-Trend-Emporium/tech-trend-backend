using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Auth;
using Application.Exceptions;
using Application.Services;
using Data.Entities;
using Domain.Entities;
using Microsoft.AspNetCore.Identity;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.AuthServices
{
    // Code generated by AI
    public class SignInTest
    {
        private readonly IUserRepository _userRepo = Substitute.For<IUserRepository>();
        private readonly ISessionRepository _sessionRepo = Substitute.For<ISessionRepository>();
        private readonly IRefreshTokenRepository _rtRepo = Substitute.For<IRefreshTokenRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly IPasswordHasher<User> _hasher = Substitute.For<IPasswordHasher<User>>();
        private readonly ITokenService _tokens = Substitute.For<ITokenService>();
        private readonly AuthService _sut;

        public SignInTest()
        {
            _sut = new AuthService(_userRepo, _sessionRepo, _rtRepo, _uow, _hasher, _tokens);
        }

        [Fact]
        public async Task SignIn_ShouldCreateSessionTokensAndReturnResponse_WhenCredentialsOkAndUserActive()
        {
            var ct = CancellationToken.None;
            var dto = new SignInRequest { EmailOrUsername = "jane@example.com", Password = "P@ssw0rd" };
            var user = TestHelper.NewUser(1, "jane@example.com", "jane", active: true);

            _userRepo.GetAsync(Arg.Any<Expression<Func<User, bool>>>(), true, ct).Returns(user);
            _hasher.VerifyHashedPassword(user, user.PasswordHash, dto.Password).Returns(PasswordVerificationResult.Success);

            // access token
            var exp = DateTime.UtcNow.AddHours(1);
            _tokens.CreateAccessToken(user, Arg.Any<IEnumerable<Claim>>())
                   .Returns(("access-token", exp));

            // refresh token
            _tokens.CreateRefreshToken(user.Id, Arg.Any<int>())
                   .Returns(TestHelper.NewRt(user.Id, sessionId: 0, token: "rt-token"));

            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.SignIn(dto, ct);

            Assert.NotNull(res);
            _sessionRepo.Received(1).Add(Arg.Any<Session>());
            _rtRepo.Received(1).Add(Arg.Any<RefreshToken>());
            await _uow.Received(2).SaveChangesAsync(ct);

            // Validar que se generó el access token con claims extra
            _tokens.Received(1).CreateAccessToken(user, Arg.Is<IEnumerable<Claim>>(c => c.Any()));
            _tokens.Received(1).CreateRefreshToken(user.Id, Arg.Any<int>());
        }

        [Fact]
        public async Task SignIn_ShouldThrowUnauthorized_WhenUserNotFound()
        {
            var ct = CancellationToken.None;
            var dto = new SignInRequest { EmailOrUsername = "nope", Password = "x" };

            _userRepo.GetAsync(Arg.Any<Expression<Func<User, bool>>>(), true, ct).Returns((User?)null);

            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.SignIn(dto, ct));
        }

        [Fact]
        public async Task SignIn_ShouldThrowUnauthorized_WhenPasswordInvalid()
        {
            var ct = CancellationToken.None;
            var dto = new SignInRequest { EmailOrUsername = "jane", Password = "bad" };
            var user = TestHelper.NewUser(1, "jane@example.com", "jane");

            _userRepo.GetAsync(Arg.Any<Expression<Func<User, bool>>>(), true, ct).Returns(user);
            _hasher.VerifyHashedPassword(user, user.PasswordHash, dto.Password).Returns(PasswordVerificationResult.Failed);

            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.SignIn(dto, ct));
        }

        [Fact]
        public async Task SignIn_ShouldThrowUnauthorized_WhenUserInactive()
        {
            var ct = CancellationToken.None;
            var dto = new SignInRequest { EmailOrUsername = "jane", Password = "ok" };
            var user = TestHelper.NewUser(1, "jane@example.com", "jane", active: false);

            _userRepo.GetAsync(Arg.Any<Expression<Func<User, bool>>>(), true, ct).Returns(user);
            _hasher.VerifyHashedPassword(user, user.PasswordHash, dto.Password).Returns(PasswordVerificationResult.Success);

            await Assert.ThrowsAsync<UnauthorizedException>(() => _sut.SignIn(dto, ct));
        }
    }
}
