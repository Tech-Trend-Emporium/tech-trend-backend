using Application.Abstraction;
using Application.Abstractions;
using Application.Exceptions;
using Data.Entities;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class CheckoutAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public CheckoutAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
            TestHelper.SetupTransactionPassthrough(_uow);
        }

        [Fact]
        public async Task CheckoutAsync_DecrementsInventoryAndClearsCart_WhenOk()
        {
            var ct = CancellationToken.None;
            int userId = 1;
            int p1 = 10, p2 = 20;

            var cart = new Cart
            {
                Id = 1,
                UserId = userId,
                Items = new List<CartItem>
                {
                    new() { ProductId = p1, Quantity = 2 },
                    new() { ProductId = p2, Quantity = 1 },
                },
                CouponId = 555
            };

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(cart);

            _productRepo.GetByIdAsync(ct, p1).Returns(TestHelper.Prod(p1));
            _productRepo.GetByIdAsync(ct, p2).Returns(TestHelper.Prod(p2));

            _inventoryRepo.ListAsync(
                Arg.Is<Expression<Func<Inventory, bool>>>(expr => expr.Compile().Invoke(new Inventory { ProductId = p1 })),
                0, 1, ct
            ).Returns(new List<Inventory> { TestHelper.Inv(p1, available: 10) });

            _inventoryRepo.ListAsync(
                Arg.Is<Expression<Func<Inventory, bool>>>(expr => expr.Compile().Invoke(new Inventory { ProductId = p2 })),
                0, 1, ct
            ).Returns(new List<Inventory> { TestHelper.Inv(p2, available: 5) });

            await _sut.CheckoutAsync(userId, ct);

            _inventoryRepo.Received(2).Update(Arg.Any<Inventory>());
            Assert.Empty(cart.Items);
            Assert.Null(cart.CouponId);
        }

        [Fact]
        public async Task CheckoutAsync_Throws_WhenAnyItemHasInsufficientStock()
        {
            var ct = CancellationToken.None;
            int userId = 2;
            int p1 = 10;

            var cart = TestHelper.CartWithItem(userId, p1, qty: 5, cartId: 77);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(cart);
            _productRepo.GetByIdAsync(ct, p1).Returns(TestHelper.Prod(p1));

            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory> { TestHelper.Inv(p1, available: 3) });

            await Assert.ThrowsAsync<ConflictException>(() => _sut.CheckoutAsync(userId, ct));

            _inventoryRepo.DidNotReceive().Update(Arg.Any<Inventory>());
            Assert.Single(cart.Items);
        }
    }
}
