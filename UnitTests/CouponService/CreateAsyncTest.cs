using Application.Abstraction;
using Application.Abstractions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Coupon;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CouponServices
{
    // Code generated by AI
    public class CreateAsyncTests
    {
        private readonly ICouponRepository _couponRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly CouponService _sut;

        public CreateAsyncTests()
        {
            _couponRepository = Substitute.For<ICouponRepository>();
            _unitOfWork = Substitute.For<IUnitOfWork>();

            _sut = new CouponService(_couponRepository, _unitOfWork);
        }

        [Fact]
        public async Task CreateAsync_ShouldThrowArgumentNullException_WhenDtoIsNull()
        {
            // Arrange
            CreateCouponRequest? dto = null;

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => _sut.CreateAsync(dto!, CancellationToken.None));
        }

        [Fact]
        public async Task CreateAsync_ShouldCreateCoupon_WhenValidDtoProvided()
        {
            // Arrange
            var dto = new CreateCouponRequest
            {
                Discount = 10,
                ValidFrom = "2024-01-01",
                ValidTo = "2024-12-31"
            };

            var ct = CancellationToken.None;            

            // Act
            var response = await _sut.CreateAsync(dto, ct);

            // Assert            

            await _unitOfWork.Received(1).SaveChangesAsync(ct);

            Assert.Equal(dto.Discount, response.Discount);
            Assert.Equal(dto.Active, response.Active);            
        }
    }
}
