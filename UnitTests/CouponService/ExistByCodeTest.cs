using Application.Abstraction;
using Application.Abstractions;
using Application.Services.Implementations;
using Data.Entities;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CouponServices
{
    // Code generated by AI
    public class ExistsByCodeAsyncTest
    {
        private readonly ICouponRepository _couponRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly CouponService _service;

        public ExistsByCodeAsyncTest()
        {
            _couponRepository = Substitute.For<ICouponRepository>();
            _unitOfWork = Substitute.For<IUnitOfWork>();
            _service = new CouponService(_couponRepository, _unitOfWork);
        }

        [Fact]
        public async Task ExistsByCodeAsync_ShouldReturnTrue_WhenCouponExists()
        {
            // Arrange
            string inputCode = "SAVE10";
            var ct = CancellationToken.None;

            _couponRepository.ExistsAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), ct)
                             .Returns(true);

            // Act
            var result = await _service.ExistsByCodeAsync(inputCode, ct);

            // Assert
            Assert.True(result);
            await _couponRepository.Received(1)
                .ExistsAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), ct);
        }

        [Fact]
        public async Task ExistsByCodeAsync_ShouldReturnFalse_WhenCouponDoesNotExist()
        {
            // Arrange
            string inputCode = "DISCOUNT50";
            var ct = CancellationToken.None;

            _couponRepository.ExistsAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), ct)
                             .Returns(false);

            // Act
            var result = await _service.ExistsByCodeAsync(inputCode, ct);

            // Assert
            Assert.False(result);
        }

        [Fact]
        public async Task ExistsByCodeAsync_ShouldNormalizeCode_ToUpperAndTrim()
        {
            // Arrange
            string inputCode = "  save20 ";
            var ct = CancellationToken.None;

            Expression<Func<Coupon, bool>> capturedExpression = null!;
            _couponRepository
                .ExistsAsync(Arg.Do<Expression<Func<Coupon, bool>>>(expr => capturedExpression = expr), ct)
                .Returns(true);

            // Act
            await _service.ExistsByCodeAsync(inputCode, ct);

            // Assert
            Assert.NotNull(capturedExpression);
            var compiled = capturedExpression.Compile();

            var testCoupon = new Coupon { Code = "SAVE20" };
            Assert.True(compiled(testCoupon));
        }

        [Fact]
        public async Task ExistsByCodeAsync_ShouldHandleNullCode_AsEmptyString()
        {
            // Arrange
            string? inputCode = null;
            var ct = CancellationToken.None;

            _couponRepository.ExistsAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), ct)
                             .Returns(false);

            // Act
            var result = await _service.ExistsByCodeAsync(inputCode, ct);

            // Assert
            Assert.False(result);
        }
    }
}
