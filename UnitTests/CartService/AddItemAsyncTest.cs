using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Cart;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class AddItemAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public AddItemAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
        }

        [Fact]
        public async Task AddItemAsync_AddsNewItem_WhenOk()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 100;

            var initial = TestHelper.EmptyCart(userId, 10);
            var reloaded = TestHelper.CartWithItem(userId, productId, 3, 10);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, reloaded);

            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId, "Test"));

            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory> { TestHelper.Inv(productId, available: 10) });

            _uow.SaveChangesAsync(ct).Returns(1);

            var dto = new AddCartItemRequest { ProductId = productId, Quantity = 3 };
            var res = await _sut.AddItemAsync(userId, dto, ct);

            Assert.Single(res.Items);
            Assert.Equal(productId, res.Items[0].ProductId);
            Assert.Equal(3, res.Items[0].Quantity);
            await _uow.Received(1).SaveChangesAsync(ct);
        }

        [Fact]
        public async Task AddItemAsync_Throws_WhenQuantityNonPositive()
        {
            var ct = CancellationToken.None;
            var dto = new AddCartItemRequest { ProductId = 1, Quantity = 0 };

            await Assert.ThrowsAsync<BadRequestException>(() => _sut.AddItemAsync(1, dto, ct));
        }

        [Fact]
        public async Task AddItemAsync_Throws_WhenProductNotFound()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 99;

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));
            _productRepo.GetByIdAsync(ct, productId).Returns((Product?)null);

            var dto = new AddCartItemRequest { ProductId = productId, Quantity = 1 };
            await Assert.ThrowsAsync<NotFoundException>(() => _sut.AddItemAsync(userId, dto, ct));
        }

        [Fact]
        public async Task AddItemAsync_Throws_WhenInventoryNotConfigured()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 50;

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));
            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId));

            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory>());

            var dto = new AddCartItemRequest { ProductId = productId, Quantity = 1 };
            await Assert.ThrowsAsync<NotFoundException>(() => _sut.AddItemAsync(userId, dto, ct));
        }

        [Fact]
        public async Task AddItemAsync_Throws_WhenInsufficientStock()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 60;

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));
            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId));

            _inventoryRepo.ListAsync(
                Arg.Is<Expression<Func<Inventory, bool>>>(expr =>
                    expr.Compile().Invoke(new Inventory { ProductId = productId })
                ),
                0, 1, ct
            ).Returns(new List<Inventory> { TestHelper.Inv(productId, available: 2) });

            var dto = new AddCartItemRequest { ProductId = productId, Quantity = 3 };
            await Assert.ThrowsAsync<ConflictException>(() => _sut.AddItemAsync(userId, dto, ct));
        }

        [Fact]
        public async Task AddItemAsync_IncrementsExistingItem_WhenAlreadyInCart()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 70;

            var initial = TestHelper.CartWithItem(userId, productId, 2, 10);
            var reloaded = TestHelper.CartWithItem(userId, productId, 5, 10);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, reloaded);

            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId));
            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory> { TestHelper.Inv(productId, available: 10) });

            _uow.SaveChangesAsync(ct).Returns(1);

            var dto = new AddCartItemRequest { ProductId = productId, Quantity = 3 };
            var res = await _sut.AddItemAsync(userId, dto, ct);

            Assert.Single(res.Items);
            Assert.Equal(5, res.Items[0].Quantity);
        }
    }
}
