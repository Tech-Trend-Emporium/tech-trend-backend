using Application.Abstraction;
using Application.Abstractions;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Category;
using General.Mappers;
using NSubstitute;
using System;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace UnitTests.CategoryServices
{
    // Code generated by AI
    public class CreateAsyncTest
    {        
        private readonly ICategoryRepository _categoryRepository = Substitute.For<ICategoryRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly CategoryService _sut;

        public CreateAsyncTest()
        {
            _sut = new CategoryService(_categoryRepository, _unitOfWork);
        }

        [Fact]
        public async Task CreateAsync_ShouldCreateCategory_WhenNotExists()
        {
            // Arrange
            var ct = CancellationToken.None;
            var dto = new CreateCategoryRequest { Name = "Electronics" };
            var expectedEntity = new Category { Name = "Electronics" };
            expectedEntity.Id = 1; 
            var expectedResponse =  CategoryMapper.ToResponse(expectedEntity);


            _categoryRepository.ExistsAsync(Arg.Any<System.Linq.Expressions.Expression<Func<Category, bool>>>(), ct).Returns(false);

            // Act
            var result = await _sut.CreateAsync(dto, ct);

            // Assert
            Assert.NotNull(result);         
            Assert.Equal(expectedResponse.Name, result.Name);
            await _unitOfWork.Received(1).SaveChangesAsync(ct);
        }
        
        [Fact]
        public async Task CreateAsync_ShouldThrowConflictException_WhenCategoryAlreadyExists()
        {
            // Arrange
            var ct = CancellationToken.None;
            var request = new CreateCategoryRequest { Name = "Books" };

            _categoryRepository.ExistsAsync(Arg.Any<System.Linq.Expressions.Expression<Func<Category, bool>>>(), ct).Returns(true);

            // Act & Assert
            var ex = await Assert.ThrowsAsync<ConflictException>(() => _sut.CreateAsync(request, ct));

            
            _categoryRepository.DidNotReceive().Add(Arg.Any<Category>());
            await _unitOfWork.DidNotReceive().SaveChangesAsync(ct);
        }
        
    }

}
