using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Cart;
using Application.Exceptions;
using Data.Entities;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Expressions;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class UpdateQuantityAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public UpdateQuantityAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
        }

        [Fact]
        public async Task UpdateQuantityAsync_SetsQuantity_WhenOk()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 10;

            var initial = TestHelper.CartWithItem(userId, productId, 1, 5);
            var reloaded = TestHelper.CartWithItem(userId, productId, 4, 5);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, reloaded);
            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId));
            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory> { TestHelper.Inv(productId, available: 10) });
            _uow.SaveChangesAsync(ct).Returns(1);

            var dto = new UpdateCartItemRequest { ProductId = productId, Quantity = 4 };

            var res = await _sut.UpdateQuantityAsync(userId, dto, ct);

            Assert.Single(res.Items);
            Assert.Equal(4, res.Items[0].Quantity);
        }

        [Fact]
        public async Task UpdateQuantityAsync_Throws_WhenProductNotInCart()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 11;

            var initial = TestHelper.EmptyCart(userId);
            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial);

            var dto = new UpdateCartItemRequest { ProductId = productId, Quantity = 1 };

            await Assert.ThrowsAsync<Application.Exceptions.NotFoundException>(() => _sut.UpdateQuantityAsync(userId, dto, ct));
        }

        [Fact]
        public async Task UpdateQuantityAsync_RemovesItem_WhenQuantityIsZeroOrLess()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 12;

            var initial = TestHelper.CartWithItem(userId, productId, 3, 5);
            var reloaded = TestHelper.EmptyCart(userId, 5);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, reloaded);
            _uow.SaveChangesAsync(ct).Returns(1);

            var dto = new UpdateCartItemRequest { ProductId = productId, Quantity = 0 };

            var res = await _sut.UpdateQuantityAsync(userId, dto, ct);

            Assert.Empty(res.Items);
        }

        [Fact]
        public async Task UpdateQuantityAsync_Throws_WhenInsufficientStock()
        {
            var ct = CancellationToken.None;
            int userId = 1, productId = 13;

            var initial = TestHelper.CartWithItem(userId, productId, 1, 5);
            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial);

            _productRepo.GetByIdAsync(ct, productId).Returns(TestHelper.Prod(productId));
            _inventoryRepo.ListAsync(Arg.Any<Expression<Func<Inventory, bool>>>(), 0, 1, ct)
                          .Returns(new List<Inventory> { TestHelper.Inv(productId, available: 2) });

            var dto = new UpdateCartItemRequest { ProductId = productId, Quantity = 5 };

            await Assert.ThrowsAsync<ConflictException>(() => _sut.UpdateQuantityAsync(userId, dto, ct));
        }
    }
}
