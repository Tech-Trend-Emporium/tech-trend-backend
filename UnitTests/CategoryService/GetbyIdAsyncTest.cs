using Application.Abstraction;
using Application.Abstractions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Category;
using NSubstitute;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace UnitTests.CategoryServices
{
    // Code generated by AI   
    public class CategoryService_GetByIdAsync_Tests
    {
        private readonly ICategoryRepository _categoryRepository = Substitute.For<ICategoryRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly CategoryService _sut; // System Under Test

        public CategoryService_GetByIdAsync_Tests()
        {
            _sut = new CategoryService(_categoryRepository, _unitOfWork);
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnCategoryResponse_WhenCategoryExists()
        {
            // Arrange
            var ct = CancellationToken.None;
            var id = 1;

            var category = new Category { Id = id, Name = "Electronics" };
            var expectedResponse = new CategoryResponse { Id = id, Name = "Electronics" };

            _categoryRepository.GetByIdAsync(ct, id).Returns(category);

            // Act
            var result = await _sut.GetByIdAsync(id, ct);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(expectedResponse.Id, result!.Id);
            Assert.Equal(expectedResponse.Name, result.Name);
            await _categoryRepository.Received(1).GetByIdAsync(ct, id);
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnNull_WhenCategoryDoesNotExist()
        {
            // Arrange
            var ct = CancellationToken.None;
            var id = 42;

            _categoryRepository.GetByIdAsync(ct, id).Returns((Category?)null);

            // Act
            var result = await _sut.GetByIdAsync(id, ct);

            // Assert
            Assert.Null(result);
            await _categoryRepository.Received(1).GetByIdAsync(ct, id);
        }
    }

}
