using Application.Abstraction;
using Application.Abstractions;
using Data.Entities;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class GetAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public GetAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
        }

        [Fact]
        public async Task GetAsync_ReturnsExistingCart_WhenExists()
        {
            var ct = CancellationToken.None;
            var userId = 1;
            var existing = TestHelper.CartWithItem(userId, 10, 2);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(existing);

            var res = await _sut.GetAsync(userId, ct);

            Assert.Equal(userId, res.UserId);
            Assert.Single(res.Items);
            await _cartRepo.Received(1).GetByUserIdAsync(userId, true, ct);
            await _cartRepo.DidNotReceive().CreateForUserAsync(Arg.Any<int>(), Arg.Any<CancellationToken>());
        }

        [Fact]
        public async Task GetAsync_CreatesCart_WhenNoneExists()
        {
            var ct = CancellationToken.None;
            var userId = 2;
            var created = TestHelper.EmptyCart(userId, 77);

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns((Cart?)null);
            _cartRepo.CreateForUserAsync(userId, ct).Returns(created);

            var res = await _sut.GetAsync(userId, ct);

            Assert.Equal(userId, res.UserId);
            await _cartRepo.Received(1).CreateForUserAsync(userId, ct);
        }
    }
}
