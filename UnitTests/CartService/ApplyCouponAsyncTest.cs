using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Cart;
using Application.Exceptions;
using Data.Entities;
using NSubstitute;
using Application.Services.Implementations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CartServices
{
    // Code generated by AI
    public class ApplyCouponAsyncTest
    {
        private readonly ICartRepository _cartRepo = Substitute.For<ICartRepository>();
        private readonly IProductRepository _productRepo = Substitute.For<IProductRepository>();
        private readonly ICouponRepository _couponRepo = Substitute.For<ICouponRepository>();
        private readonly IInventoryRepository _inventoryRepo = Substitute.For<IInventoryRepository>();
        private readonly IUnitOfWork _uow = Substitute.For<IUnitOfWork>();
        private readonly CartService _sut;

        public ApplyCouponAsyncTest()
        {
            _sut = new CartService(_cartRepo, _productRepo, _couponRepo, _inventoryRepo, _uow);
        }

        [Fact]
        public async Task ApplyCouponAsync_Applies_WhenActiveAndInRange()
        {
            var ct = CancellationToken.None;
            int userId = 1;

            var initial = TestHelper.EmptyCart(userId, 5);
            var after = TestHelper.EmptyCart(userId, 5);

            var coupon = TestHelper.Coup("SAVE10", active: true, from: DateTime.UtcNow.AddDays(-1), to: DateTime.UtcNow.AddDays(10));

            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(initial, after);

            _couponRepo.ListAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), 0, 1, ct)
                       .Returns(new List<Coupon> { coupon });

            _uow.SaveChangesAsync(ct).Returns(1);

            var res = await _sut.ApplyCouponAsync(userId, new ApplyCouponRequest { CouponCode = "SAVE10" }, ct);

            await _uow.Received(1).SaveChangesAsync(ct);
            Assert.Equal(userId, res.UserId);
        }

        [Fact]
        public async Task ApplyCouponAsync_Throws_WhenCodeEmpty()
        {
            var ct = CancellationToken.None;
            await Assert.ThrowsAsync<BadRequestException>(() =>
                _sut.ApplyCouponAsync(1, new ApplyCouponRequest { CouponCode = "   " }, ct));
        }

        [Fact]
        public async Task ApplyCouponAsync_Throws_WhenCouponNotFound()
        {
            var ct = CancellationToken.None;
            int userId = 1;
            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));

            _couponRepo.ListAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), 0, 1, ct)
                       .Returns(new List<Coupon>());

            await Assert.ThrowsAsync<NotFoundException>(() =>
                _sut.ApplyCouponAsync(userId, new ApplyCouponRequest { CouponCode = "NOPE" }, ct));
        }

        [Fact]
        public async Task ApplyCouponAsync_Throws_WhenInactive()
        {
            var ct = CancellationToken.None;
            int userId = 1;
            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));

            var coupon = TestHelper.Coup("X", active: false);
            _couponRepo.ListAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), 0, 1, ct)
                       .Returns(new List<Coupon> { coupon });

            await Assert.ThrowsAsync<BadRequestException>(() =>
                _sut.ApplyCouponAsync(userId, new ApplyCouponRequest { CouponCode = "X" }, ct));
        }

        [Fact]
        public async Task ApplyCouponAsync_Throws_WhenNotStartedOrExpired()
        {
            var ct = CancellationToken.None;
            int userId = 1;
            _cartRepo.GetByUserIdAsync(userId, true, ct).Returns(TestHelper.EmptyCart(userId));

            var future = TestHelper.Coup("FUT", active: true, from: DateTime.UtcNow.AddDays(2));
            var past = TestHelper.Coup("PAST", active: true, from: DateTime.UtcNow.AddDays(-10), to: DateTime.UtcNow.AddDays(-1));

            _couponRepo.ListAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), 0, 1, ct).Returns(new List<Coupon> { future });
            await Assert.ThrowsAsync<BadRequestException>(() =>
                _sut.ApplyCouponAsync(userId, new ApplyCouponRequest { CouponCode = "FUT" }, ct));

            _couponRepo.ListAsync(Arg.Any<Expression<Func<Coupon, bool>>>(), 0, 1, ct).Returns(new List<Coupon> { past });
            await Assert.ThrowsAsync<BadRequestException>(() =>
                _sut.ApplyCouponAsync(userId, new ApplyCouponRequest { CouponCode = "PAST" }, ct));
        }
    }
}
