using Application.Abstraction;
using Application.Abstractions;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.WishList;
using General.Mappers;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.WishListServices 
{
    // Code generated by AI
    public class AddItemAsyncTest
    {
            private readonly IWishListRepository _wishListRepository;
            private readonly IProductRepository _productRepository;
            private readonly ICartRepository _cartRepository;
            private readonly IUnitOfWork _unitOfWork;
            private readonly WishListService _sut; // System Under Test

            public AddItemAsyncTest()
            {
                _wishListRepository = Substitute.For<IWishListRepository>();
                _productRepository = Substitute.For<IProductRepository>();
                _cartRepository = Substitute.For<ICartRepository>();
                _unitOfWork = Substitute.For<IUnitOfWork>();

                _sut = new WishListService(_wishListRepository, _productRepository, _cartRepository, _unitOfWork);
            }

            [Fact]
            public async Task AddItemAsync_ShouldAddProduct_WhenAllIsOk()
            {
                var ct = CancellationToken.None;
                var userId = 1;
                var dto = new AddWishListItemRequest { ProductId = 100 };
                var wishList = new WishList { Id = 10, UserId = userId };
                var product = new Product { Id = 100, Title = "Test Product" };

                var expectedResponse = WishListMapper.ToResponse(new WishList 
                { 
                    Id = 10, 
                    UserId = userId, 
                    Items = new List<WishListItem>
                    {
                        new WishListItem {Id = 10, ProductId = dto.ProductId } 
                    }
                });

                _wishListRepository.GetByUserIdAsync(userId, true, ct).Returns(wishList);
                _productRepository.GetByIdAsync(ct, dto.ProductId).Returns(product);

                // Act
                var result = await _sut.AddItemAsync(userId, dto);

                // Assert
                Assert.Equal(expectedResponse.UserId, result.UserId);
                Assert.Equal(expectedResponse.Items[0].ProductId, result.Items[0].ProductId);
                await _unitOfWork.Received(1).SaveChangesAsync(ct);
            }

            [Fact]
            public async Task AddItemAsync_ShouldCreateWishList_WhenNotExists()
            {
                var ct = CancellationToken.None;
                var userId = 2;
                var dto = new AddWishListItemRequest { ProductId = 200 };
                WishList createdWishList = new WishList { Id = 20, UserId = userId };
                var product = new Product { Id = 200, Title = "Another Product" };
                var expectedResponse = WishListMapper.ToResponse(new WishList
                {
                    Id = createdWishList.Id,
                    UserId = userId,
                    Items = new List<WishListItem>
                        {
                            new WishListItem {Id = 1, ProductId = dto.ProductId, WishListId = createdWishList.Id }
                        }
                });            
                _wishListRepository.GetByUserIdAsync(userId, true, ct).Returns( (WishList?)null, createdWishList);
                //ReturnsNextFromSequence((WishList?)null);
                _wishListRepository.CreateForUserAsync(userId, ct).Returns(createdWishList);
                _productRepository.GetByIdAsync(ct, product.Id).Returns(product);    



            // Act
            var result = await _sut.AddItemAsync(userId, dto, ct);

                // Assert
                Assert.Equal(expectedResponse.UserId, result.UserId);
                Assert.Equal(expectedResponse.Items[0].ProductId, result.Items[0].ProductId);
                await _unitOfWork.Received(1).SaveChangesAsync(ct);
                //await _wishListRepository.Received(1).CreateForUserAsync(userId, ct);
                await _wishListRepository.Received(2).GetByUserIdAsync(userId, true, ct); // Once before creation, once after
                await _wishListRepository.Received(1).CreateForUserAsync(userId, ct);
        }

            [Fact]
            public async Task AddItemAsync_ShouldThrow_WhenProductNotFound()
            {
                var ct = CancellationToken.None;
                var userId = 3;
                var dto = new AddWishListItemRequest { ProductId = 300 };
                var wishList = new WishList { Id = 30, UserId = userId };

                _wishListRepository.GetByUserIdAsync(userId, true, ct)
                    .Returns(wishList);

                _productRepository.GetByIdAsync(ct, dto.ProductId)
                    .Returns((Product?)null);

                // Act % Assert
                await Assert.ThrowsAsync<NotFoundException>(async () => await _sut.AddItemAsync(userId, dto));
            }

            [Fact]
            public async Task AddItemAsync_ShouldNotAddDuplicate_WhenProductAlreadyExists()
            {
                var ct = CancellationToken.None;
                var userId = 4;
                var dto = new AddWishListItemRequest { ProductId = 400 };
                var wishList = new WishList 
                { 
                    Id = 40, 
                    UserId = userId ,
                    Items = new List<WishListItem>
                    {
                        new WishListItem { Id = 1, ProductId = 400, WishListId = 40 }
                    }
                };                

                var product = new Product { Id = 400, Title = "Existing Product" };

                _wishListRepository.GetByUserIdAsync(userId, true, ct).Returns(wishList);

                _productRepository.GetByIdAsync(ct, dto.ProductId).Returns(product);                

                // Act & assert
                await Assert.ThrowsAsync<InvalidOperationException>(async () => await _sut.AddItemAsync(userId, dto));            
            }
        }
}
