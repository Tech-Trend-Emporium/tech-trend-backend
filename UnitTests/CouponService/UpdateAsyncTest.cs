using Application.Abstraction;
using Application.Abstractions;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Coupon;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UnitTests.CouponServices
{
    // Code generated by AI
    public class CouponServiceTests
    {
        private readonly ICouponRepository _couponRepository = Substitute.For<ICouponRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly CouponService _service;

        public CouponServiceTests()
        {                        
            _service = new CouponService(_couponRepository, _unitOfWork);
        }

        [Fact]
        public async Task UpdateAsync_ShouldUpdateCouponSuccessfully()
        {
            // Arrange
            var couponId = 1;
            var dto = new UpdateCouponRequest
            {                
                Discount = 20,
                Active = true,
                ValidFrom = "2025-01-01",
                ValidTo = "2025-12-31"
            };

            var existingEntity = new Coupon
            {
                Id = couponId,
                Discount = 10,
                Active = false,
                ValidFrom = new DateTime(2024, 01, 01),
                ValidTo = new DateTime(2024, 12, 31)
            };

            _couponRepository.GetByIdAsync(Arg.Any<CancellationToken>(), couponId).Returns(existingEntity);

            // Act
            var result = await _service.UpdateAsync(couponId, dto, CancellationToken.None);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(dto.Active, result.Active);
            Assert.Equal(dto.Discount, result.Discount);
            await _unitOfWork.Received(1).SaveChangesAsync(Arg.Any<CancellationToken>());
            _couponRepository.Received(1).Update(existingEntity);
        }

        [Fact]
        public async Task UpdateAsync_ShouldThrowArgumentNull_WhenDtoIsNull()
        {
            // Arrange
            UpdateCouponRequest dto = null!;
            var couponId = 1;

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() =>
            _service.UpdateAsync(couponId, dto, CancellationToken.None));
        }

        [Fact]
        public async Task UpdateAsync_ShouldThrowNotFound_WhenCouponNotExists()
        {
            // Arrange
            var couponId = 99;
            var dto = new UpdateCouponRequest { Discount = 25 };

            _couponRepository.GetByIdAsync(Arg.Any<CancellationToken>(), couponId).Returns((Coupon?)null);

            // Act & Assert
            await Assert.ThrowsAsync<NotFoundException>(() =>
                _service.UpdateAsync(couponId, dto, CancellationToken.None));
        }

        [Fact]
        public async Task UpdateAsync_ShouldThrowBadRequest_WhenValidToBeforeValidFrom()
        {
            // Arrange
            var couponId = 2;
            var dto = new UpdateCouponRequest
            {
                ValidFrom = "2025-12-31",
                ValidTo = "2025-01-01"
            };

            var existingEntity = new Coupon
            {
                Id = couponId,
                ValidFrom = new DateTime(2024, 01, 01),
                ValidTo = new DateTime(2024, 12, 31)
            };

            _couponRepository.GetByIdAsync(Arg.Any<CancellationToken>(), couponId)
                .Returns(existingEntity);

            // Act & Assert
            await Assert.ThrowsAsync<BadRequestException>(() =>
                _service.UpdateAsync(couponId, dto, CancellationToken.None));
        }
    }
}
