name: cd-push-main (Deployment)

on:
  push:
    branches: [main]

concurrency:
  group: cd-push-main
  cancel-in-progress: false

permissions:
  id-token: write   # Required for OIDC to Azure
  contents: read

env:
  DOTNET_VERSION: '8.0.0'
  IMAGE_NAME: trend-tech-emporium-api
  IMAGE_TAG: ${{ github.sha }}
  REGISTRY_SERVER: ${{ vars.REGISTRY_SERVER }}
  REGISTRY_NAMESPACE: ${{ vars.REGISTRY_NAMESPACE }}
  IMAGE_URI: ${{ vars.REGISTRY_SERVER }}/${{ vars.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  # Azure infra (non existent yet)
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP:  ${{ vars.AZURE_RESOURCE_GROUP }}
  ACA_ENVIRONMENT:       ${{ vars.ACA_ENVIRONMENT }}     # container apps environment name
  ACA_APP_NAME:          ${{ vars.ACA_APP_NAME }}        # container app name

  # API path used for smoke test
  SMOKE_PATH: /healthz
  SMOKE_TIMEOUT: "15"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:     ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:     ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Enable multiple revisions (needed for blue/green deployment)
        run: |
          az extension add -n containerapp --upgrade -y
          az config set extension.use_dynamic_install=yes_without_prompt
          az containerapp revision set-mode \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --mode multiple

      - name: Capture current active revision
        id: prev-rev
        run: |
          set -e
          PREV_REV=$(az containerapp revision list \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --query "[?properties.active==\`true\`].name | [0]" -o tsv)
          echo "prev=$PREV_REV" >> $GITHUB_OUTPUT
          echo "Previous active revision: ${PREV_REV:-none}"

      - name: Update image (create new revision)
        run: |
          az containerapp update \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --image "$IMAGE_URI" \
            --set-env-vars "ASPNETCORE_URLS=http://0.0.0.0:8080"

      - name: Identify newest revision
        id: new-rev
        run: |
          set -e
          NEW_REV=$(az containerapp revision list \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --query "sort_by(@,&properties.createdTime)[-1].name" -o tsv)
          echo "name=$NEW_REV" >> $GITHUB_OUTPUT
          echo "New revision: $NEW_REV"

      - name: Prepare traffic routing
        if: steps.prev-rev.outputs.prev != ''
        run: |
          az containerapp ingress traffic set \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --revision-weight "${{ steps.prev-rev.outputs.prev }}=100" \
            --revision-weight "${{ steps.new-rev.outputs.name }}=0"
        # 0% traffic to new revision, 100% traffic to old one

      - name: If first deployment, traffic everything
        if: steps.prev-rev.outputs.prev == ''
        run: |
          az containerapp ingress traffic set \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --revision-weight "${{ steps.new-rev.outputs.name }}=100"

      - name: Get app URL
        id: fqdn
        run: |
          FQDN=$(az containerapp show \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "url=https://${FQDN}" >> $GITHUB_OUTPUT
          echo "App URL: https://${FQDN}"

      - name: Smoke test new revision directly (sticky header)
        id: smoke
        run: |
          set -e
          URL="${{ steps.fqdn.outputs.url }}${{ env.SMOKE_PATH }}"
          REV="${{ steps.new-rev.outputs.name }}"
          echo "Probing $URL on revision $REV ..."
          # Use revision header to target the new revision even if traffic is 0%
          for i in $(seq 1 5); do
            code=$(curl -sS -m $SMOKE_TIMEOUT -o /dev/null -w "%{http_code}" \
              -H "x-ms-containerapp-revision-name: $REV" "$URL" || echo "000")
            echo "Attempt $i -> HTTP $code"
            if [ "$code" -ge 200 ] && [ "$code" -lt 300 ]; then
              echo "ok=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 3
          done
          echo "ok=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Traffic swap to new revision
        if: steps.smoke.outputs.ok == 'true' && steps.prev-rev.outputs.prev != ''
        run: |
          az containerapp ingress traffic set \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --revision-weight "${{ steps.new-rev.outputs.name }}=100" \
            --revision-weight "${{ steps.prev-rev.outputs.prev }}=0"

      - name: Alert deploy at full traffic
        if: steps.smoke.outputs.ok == 'true' && steps.prev-rev.outputs.prev == ''
        run: echo "First deployment healthy."

      - name: Rollback if smoke fails
        if: failure() && steps.prev-rev.outputs.prev != ''
        run: |
          echo "Smoke test failed. Rolling traffic back to ${{ steps.prev-rev.outputs.prev }} ..."
          az containerapp ingress traffic set \
            --name "$ACA_APP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --revision-weight "${{ steps.prev-rev.outputs.prev }}=100" \
            --revision-weight "${{ steps.new-rev.outputs.name }}=0" || true
          exit 1

      - name: Alert
        run: |
          echo "Deployed image: $IMAGE_URI" >> $GITHUB_STEP_SUMMARY
          echo "Prev revision: ${{ steps.prev-rev.outputs.prev }}" >> $GITHUB_STEP_SUMMARY
          echo "New revision:  ${{ steps.new-rev.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "App URL:       ${{ steps.fqdn.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "Smoke OK:      ${{ steps.smoke.outputs.ok }}" >> $GITHUB_STEP_SUMMARY
