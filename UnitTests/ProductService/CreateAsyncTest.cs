using Application.Abstraction;
using Application.Abstractions;
using Application.Dtos.Inventory;
using Application.Exceptions;
using Application.Services.Implementations;
using Data.Entities;
using General.Dto.Product;
using General.Mappers;
using NSubstitute;
using System;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace UnitTests.ProductServices
{
    // Code generated by AI
    public class CreateAsyncTest
    {
        private readonly IProductRepository _productRepository = Substitute.For<IProductRepository>();
        private readonly ICategoryRepository _categoryRepository = Substitute.For<ICategoryRepository>();
        private readonly IUnitOfWork _unitOfWork = Substitute.For<IUnitOfWork>();
        private readonly ProductService _sut;

        public CreateAsyncTest()
        {
            _sut = new ProductService(_productRepository, _categoryRepository, _unitOfWork);
        }

        [Fact]
        public async Task CreateAsync_ShouldCreateProduct_WhenRequestIsValid()
        {
            // Arrange
            var ct = CancellationToken.None;
            var dto = new CreateProductRequest
            {
                Title = "Laptop",
                Price = 999.99m,
                Description = "A high-end laptop",
                ImageUrl = "http://example.com/laptop.jpg",
                Category = "Electronics",
                RatingRate = 0,
                Inventory = new CreateInventoryInlineRequest
                {
                    Total = 10,
                    Available = 5
                }
            };

            var category = new Category { Id = 10, Name = "Electronics" };
            var productEntity = ProductMapper.ToEntity(dto, category.Id);
            productEntity.Id = 1; // Simulate DB generated Id
            productEntity.Inventory = InventoryMapper.ToEntity(dto.Inventory);

            var expectedResult = ProductMapper.ToResponse(productEntity, category.Name);

        

            _categoryRepository.GetAsync(
                Arg.Any<System.Linq.Expressions.Expression<Func<Category, bool>>>(),
                true,
                ct
            ).Returns(category);
            _unitOfWork.SaveChangesAsync(ct).Returns(1);


            // Act
            var result = await _sut.CreateAsync(dto, ct);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(expectedResult.Title, result.Title);
            Assert.Equal(expectedResult.Category, result.Category);
        }
    
        [Fact]
        public async Task CreateAsync_ShouldThrowArgumentNullException_WhenDtoIsNull()
        {
            // Arrange
            CreateProductRequest dto = null;

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => _sut.CreateAsync(dto));
        }
   
        [Fact]
        public async Task CreateAsync_ShouldThrowNotFoundException_WhenCategoryNotFound()
        {
            // Arrange
            var dto = new CreateProductRequest
            {
                Title = "Laptop",
                Price = 999.99m,
                Description = "A high-end laptop",
                ImageUrl = "http://example.com/laptop.jpg",
                Category = "Electronics",
                RatingRate = 0,
                Inventory = new CreateInventoryInlineRequest
                {
                    Total = 10,
                    Available = 5
                }
            };
            _categoryRepository.GetAsync(
                Arg.Any<System.Linq.Expressions.Expression<Func<Category, bool>>>(),
                true,
                Arg.Any<CancellationToken>()
            ).Returns((Category)null);

            // Act & Assert
            await Assert.ThrowsAsync<NotFoundException>(() => _sut.CreateAsync(dto));
        }
 
        [Fact]
        public async Task CreateAsync_ShouldThrowBadRequestException_WhenAvailableGreaterThanTotal()
        {
            // Arrange
            var dto = new CreateProductRequest
            {
                Title = "Laptop",
                Price = 999.99m,
                Description = "A high-end laptop",
                ImageUrl = "http://example.com/laptop.jpg",
                Category = "Electronics",
                RatingRate = 0,
                Inventory = new CreateInventoryInlineRequest
                {
                    Total = 10,
                    Available = 15
                }
            };

            var category = new Category { Id = 10, Name = "Electronics" };

            _categoryRepository.GetAsync(
                Arg.Any<System.Linq.Expressions.Expression<Func<Category, bool>>>(),
                true,
                Arg.Any<CancellationToken>()
            ).Returns(category);

            // Act & Assert
            await Assert.ThrowsAsync<BadRequestException>(() => _sut.CreateAsync(dto));
        }

        [Fact]
        public async Task CreateAsync_ShouldThrowConflictException_WhenProductAlreadyExists()
        {
            // Arrange
            var dto = new CreateProductRequest
            {
                Title = "Laptop",
                Price = 999.99m,
                Description = "A high-end laptop",
                ImageUrl = "http://example.com/laptop.jpg",
                Category = "Electronics",
                RatingRate = 0,
                Inventory = new CreateInventoryInlineRequest
                {
                    Total = 10,
                    Available = 5
                }
            };
            var existingProduct = new Product { Id = 1, Title = "Laptop" };
            _productRepository.GetAsync(
                Arg.Any<System.Linq.Expressions.Expression<Func<Product, bool>>>(),
                true,
                Arg.Any<CancellationToken>()
            ).Returns(existingProduct);
            // Act & Assert
            await Assert.ThrowsAsync<ConflictException>(() => _sut.CreateAsync(dto));
        }
    }
}
